from typing import Callable, Concatenate, Literal, ParamSpec, Protocol, TypeVar, TypeVarTuple, Unpack, overload

P = ParamSpec('P')
Ts = TypeVarTuple('Ts')
R = TypeVar('R', covariant=True)
A1 = TypeVar('A1', contravariant=True)
A2 = TypeVar('A2', contravariant=True)
A3 = TypeVar('A3', contravariant=True)
A4 = TypeVar('A4', contravariant=True)
A5 = TypeVar('A5', contravariant=True)
A6 = TypeVar('A6', contravariant=True)
A7 = TypeVar('A7', contravariant=True)
A8 = TypeVar('A8', contravariant=True)
A9 = TypeVar('A9', contravariant=True)
A10 = TypeVar('A10', contravariant=True)

class CurriedV1(Protocol[A1, P, R]):
    @overload
    def __call__(self, A1: A1, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self) -> 'CurriedV1[A1, P, R]': ...

class CurriedFixedV1(Protocol[A1, *Ts, R]):
    @overload
    def __call__(self, A1: A1, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self) -> 'CurriedFixedV1[A1, *Ts, R]': ...

class CurriedV2(Protocol[A1, A2, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV1[A2, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV2[A1, A2, P, R]': ...

class CurriedFixedV2(Protocol[A1, A2, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV1[A2, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV2[A1, A2, *Ts, R]': ...

class CurriedV3(Protocol[A1, A2, A3, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV2[A2, A3, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV1[A3, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV3[A1, A2, A3, P, R]': ...

class CurriedFixedV3(Protocol[A1, A2, A3, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV2[A2, A3, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV1[A3, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV3[A1, A2, A3, *Ts, R]': ...

class CurriedV4(Protocol[A1, A2, A3, A4, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV3[A2, A3, A4, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV2[A3, A4, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV1[A4, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV4[A1, A2, A3, A4, P, R]': ...

class CurriedFixedV4(Protocol[A1, A2, A3, A4, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV3[A2, A3, A4, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV2[A3, A4, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV1[A4, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV4[A1, A2, A3, A4, *Ts, R]': ...

class CurriedV5(Protocol[A1, A2, A3, A4, A5, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV4[A2, A3, A4, A5, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV3[A3, A4, A5, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV2[A4, A5, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedV1[A5, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV5[A1, A2, A3, A4, A5, P, R]': ...

class CurriedFixedV5(Protocol[A1, A2, A3, A4, A5, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV4[A2, A3, A4, A5, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV3[A3, A4, A5, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV2[A4, A5, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedFixedV1[A5, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV5[A1, A2, A3, A4, A5, *Ts, R]': ...

class CurriedV6(Protocol[A1, A2, A3, A4, A5, A6, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV5[A2, A3, A4, A5, A6, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV4[A3, A4, A5, A6, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV3[A4, A5, A6, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedV2[A5, A6, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedV1[A6, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV6[A1, A2, A3, A4, A5, A6, P, R]': ...

class CurriedFixedV6(Protocol[A1, A2, A3, A4, A5, A6, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV5[A2, A3, A4, A5, A6, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV4[A3, A4, A5, A6, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV3[A4, A5, A6, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedFixedV2[A5, A6, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedFixedV1[A6, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV6[A1, A2, A3, A4, A5, A6, *Ts, R]': ...

class CurriedV7(Protocol[A1, A2, A3, A4, A5, A6, A7, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV6[A2, A3, A4, A5, A6, A7, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV5[A3, A4, A5, A6, A7, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV4[A4, A5, A6, A7, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedV3[A5, A6, A7, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedV2[A6, A7, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedV1[A7, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV7[A1, A2, A3, A4, A5, A6, A7, P, R]': ...

class CurriedFixedV7(Protocol[A1, A2, A3, A4, A5, A6, A7, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV6[A2, A3, A4, A5, A6, A7, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV5[A3, A4, A5, A6, A7, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV4[A4, A5, A6, A7, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedFixedV3[A5, A6, A7, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedFixedV2[A6, A7, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedFixedV1[A7, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV7[A1, A2, A3, A4, A5, A6, A7, *Ts, R]': ...

class CurriedV8(Protocol[A1, A2, A3, A4, A5, A6, A7, A8, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV7[A2, A3, A4, A5, A6, A7, A8, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV6[A3, A4, A5, A6, A7, A8, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV5[A4, A5, A6, A7, A8, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedV4[A5, A6, A7, A8, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedV3[A6, A7, A8, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedV2[A7, A8, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, /) -> CurriedV1[A8, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV8[A1, A2, A3, A4, A5, A6, A7, A8, P, R]': ...

class CurriedFixedV8(Protocol[A1, A2, A3, A4, A5, A6, A7, A8, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV7[A2, A3, A4, A5, A6, A7, A8, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV6[A3, A4, A5, A6, A7, A8, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV5[A4, A5, A6, A7, A8, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedFixedV4[A5, A6, A7, A8, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedFixedV3[A6, A7, A8, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedFixedV2[A7, A8, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, /) -> CurriedFixedV1[A8, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV8[A1, A2, A3, A4, A5, A6, A7, A8, *Ts, R]': ...

class CurriedV9(Protocol[A1, A2, A3, A4, A5, A6, A7, A8, A9, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV8[A2, A3, A4, A5, A6, A7, A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV7[A3, A4, A5, A6, A7, A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV6[A4, A5, A6, A7, A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedV5[A5, A6, A7, A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedV4[A6, A7, A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedV3[A7, A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, /) -> CurriedV2[A8, A9, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, /) -> CurriedV1[A9, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV9[A1, A2, A3, A4, A5, A6, A7, A8, A9, P, R]': ...

class CurriedFixedV9(Protocol[A1, A2, A3, A4, A5, A6, A7, A8, A9, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV8[A2, A3, A4, A5, A6, A7, A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV7[A3, A4, A5, A6, A7, A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV6[A4, A5, A6, A7, A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedFixedV5[A5, A6, A7, A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedFixedV4[A6, A7, A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedFixedV3[A7, A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, /) -> CurriedFixedV2[A8, A9, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, /) -> CurriedFixedV1[A9, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV9[A1, A2, A3, A4, A5, A6, A7, A8, A9, *Ts, R]': ...

class CurriedV10(Protocol[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, *args: P.args, **kw: P.kwargs) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedV9[A2, A3, A4, A5, A6, A7, A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedV8[A3, A4, A5, A6, A7, A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedV7[A4, A5, A6, A7, A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedV6[A5, A6, A7, A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedV5[A6, A7, A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedV4[A7, A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, /) -> CurriedV3[A8, A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, /) -> CurriedV2[A9, A10, P, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, /) -> CurriedV1[A10, P, R]: ...
    @overload
    def __call__(self) -> 'CurriedV10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P, R]': ...

class CurriedFixedV10(Protocol[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, *Ts, R]):
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, A10: A10, *xs: Unpack[Ts]) -> R: ...
    @overload
    def __call__(self, A1: A1, /) -> CurriedFixedV9[A2, A3, A4, A5, A6, A7, A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, /) -> CurriedFixedV8[A3, A4, A5, A6, A7, A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, /) -> CurriedFixedV7[A4, A5, A6, A7, A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, /) -> CurriedFixedV6[A5, A6, A7, A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, /) -> CurriedFixedV5[A6, A7, A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, /) -> CurriedFixedV4[A7, A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, /) -> CurriedFixedV3[A8, A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, /) -> CurriedFixedV2[A9, A10, *Ts, R]: ...
    @overload
    def __call__(self, A1: A1, A2: A2, A3: A3, A4: A4, A5: A5, A6: A6, A7: A7, A8: A8, A9: A9, /) -> CurriedFixedV1[A10, *Ts, R]: ...
    @overload
    def __call__(self) -> 'CurriedFixedV10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, *Ts, R]': ...

@overload
def curryv(pn: Literal[10], f: Callable[Concatenate[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P], R], /) -> CurriedV10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P, R]: ...

@overload
def curryv(pn: Literal[9], f: Callable[Concatenate[A1, A2, A3, A4, A5, A6, A7, A8, A9, P], R], /) -> CurriedV9[A1, A2, A3, A4, A5, A6, A7, A8, A9, P, R]: ...

@overload
def curryv(pn: Literal[8], f: Callable[Concatenate[A1, A2, A3, A4, A5, A6, A7, A8, P], R], /) -> CurriedV8[A1, A2, A3, A4, A5, A6, A7, A8, P, R]: ...

@overload
def curryv(pn: Literal[7], f: Callable[Concatenate[A1, A2, A3, A4, A5, A6, A7, P], R], /) -> CurriedV7[A1, A2, A3, A4, A5, A6, A7, P, R]: ...

@overload
def curryv(pn: Literal[6], f: Callable[Concatenate[A1, A2, A3, A4, A5, A6, P], R], /) -> CurriedV6[A1, A2, A3, A4, A5, A6, P, R]: ...

@overload
def curryv(pn: Literal[5], f: Callable[Concatenate[A1, A2, A3, A4, A5, P], R], /) -> CurriedV5[A1, A2, A3, A4, A5, P, R]: ...

@overload
def curryv(pn: Literal[4], f: Callable[Concatenate[A1, A2, A3, A4, P], R], /) -> CurriedV4[A1, A2, A3, A4, P, R]: ...

@overload
def curryv(pn: Literal[3], f: Callable[Concatenate[A1, A2, A3, P], R], /) -> CurriedV3[A1, A2, A3, P, R]: ...

@overload
def curryv(pn: Literal[2], f: Callable[Concatenate[A1, A2, P], R], /) -> CurriedV2[A1, A2, P, R]: ...

@overload
def curryv(pn: Literal[1], f: Callable[Concatenate[A1, P], R], /) -> CurriedV1[A1, P, R]: ...

@overload
def curryv(pn: int, f: Callable[..., R], /) -> Callable[..., R]: ...
